lower_bound = mean_pred - 1.96*sqrt(var_pred)
# Plot the posterior mean and confidence intervals
plot(x_pred, mean_pred, type = 'l', ylim = range(c(upper_bound, lower_bound)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
polygon(c(x_pred, rev(x_pred)), c(upper_bound, rev(lower_bound)), col = 'grey80', border = NA)
lines(x_pred, mean_pred, lwd = 2)
points(result$x, result$y, pch = 19, col = 'red')  # Plot observed data
## Un-normalized result:
ff <- list(fn = NULL, gr = NULL, he = NULL)
ff$fn <- function(x) as.numeric(predict_gp(x_pred = x, data = result, choice_cov = square_exp_cov, noise_var = noise_var)$mean)
ff$gr <- function(x) as.numeric(predict_gp_deriv(x_pred = x, data = result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_gr, noise_var = noise_var)$mean)
ff$he <- function(x) as.numeric(predict_gp_deriv(x_pred = x, data = result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_hess, noise_var = noise_var)$mean)
# Generate data points
x_vals <- seq(0.01, 0.99, length.out = 100)
# Calculate function values
fn_vals <- sapply(x_vals, ff$fn)
gr_vals <- sapply(x_vals, ff$gr)
he_vals <- sapply(x_vals, ff$he)
mode <- x_vals[which.max(fn_vals)]
### Convert to the full real line:
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
ff <- list(fn = NULL, gr = NULL, he = NULL)
# AGHQ requires negative log-post
ff$fn <- function(y) as.numeric(predict_gp(x_pred = pnorm(y), data = result, choice_cov = square_exp_cov, noise_var = noise_var)$mean + dnorm(y, log = TRUE))
ff$gr <- function(x) as.numeric(predict_gp_deriv(x_pred = x, data = result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_gr, noise_var = noise_var)$mean - x)
ff$he <- function(x) -as.matrix(predict_gp_deriv(x_pred = x, data = result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_hess, noise_var = noise_var)$mean - 1)
fn_vals <- ff$fn(y_vals)
mode <- qnorm(x_vals[which.max(fn_vals)])
## Normalization with AGHQ:
obj <- function(x) {exp(ff$fn(x))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
burnin <- 1000
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
#### Now consider doing it adaptively:
result_ad <- BO_adap(func = objective_func,
update_step = 10,
number_eval = 20,
beta = 3,
lower = 1,
upper = 9,
length_scale = 1,
signal_var = 1,
noise_var = noise_var,
initial = 1)
# Assuming predict_gp produces a list with 'mean' and 'var' (replace this with your real function)
square_exp_cov <- square_exp_cov_generator(length_scale = result_ad$length_scale, signal_var = result_ad$signal_var)
square_exp_cov_gr <- square_exp_cov_deriv_generator(length_scale = result_ad$length_scale, signal_var = result_ad$signal_var)
square_exp_cov_hess <- square_exp_cov_hess_generator(length_scale = result_ad$length_scale, signal_var = result_ad$signal_var)
preds = predict_gp(x_pred = x_pred, data = result_ad$result, choice_cov = square_exp_cov, noise_var = noise_var)
# Extract mean and variance
mean_pred = preds$mean
var_pred = preds$var
# Compute confidence intervals (1.96 standard deviation around the mean)
upper_bound = mean_pred + 1.96*sqrt(var_pred)
lower_bound = mean_pred - 1.96*sqrt(var_pred)
# Plot the posterior mean and confidence intervals
plot(x_pred, mean_pred, type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
polygon(c(x_pred, rev(x_pred)), c(upper_bound, rev(lower_bound)), col = 'grey80', border = NA)
lines(x_pred, mean_pred, lwd = 2)
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
## Un-normalized result:
ff <- list(fn = NULL, gr = NULL, he = NULL)
ff$fn <- function(x) as.numeric(predict_gp(x_pred = x, data = result_ad$result, choice_cov = square_exp_cov, noise_var = noise_var)$mean)
ff$gr <- function(x) as.numeric(predict_gp_deriv(x_pred = x, data = result_ad$result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_gr, noise_var = noise_var)$mean)
ff$he <- function(x) as.numeric(predict_gp_deriv(x_pred = x, data = result_ad$result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_hess, noise_var = noise_var)$mean)
# Generate data points
x_vals <- seq(0.01, 0.99, length.out = 100)
# Calculate function values
fn_vals <- sapply(x_vals, ff$fn)
gr_vals <- sapply(x_vals, ff$gr)
he_vals <- sapply(x_vals, ff$he)
mode <- x_vals[which.max(fn_vals)]
### Convert to the full real line:
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
ff <- list(fn = NULL, gr = NULL, he = NULL)
# AGHQ requires negative log-post
ff$fn <- function(y) as.numeric(predict_gp(x_pred = pnorm(y), data = result_ad$result, choice_cov = square_exp_cov, noise_var = noise_var)$mean + dnorm(y, log = TRUE))
ff$gr <- function(x) as.numeric(predict_gp_deriv(x_pred = x, data = result_ad$result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_gr, noise_var = noise_var)$mean - x)
# ff$gr <- function(y) numDeriv::grad(ff$fn, y)
ff$he <- function(x) -as.matrix(predict_gp_deriv(x_pred = x, data = result_ad$result, choice_cov = square_exp_cov, choice_cov_deriv = square_exp_cov_hess, noise_var = noise_var)$mean - 1)
# ff$he <- function(y) -numDeriv::hessian(ff$fn, y)
fn_vals <- ff$fn(y_vals)
mode <- qnorm(x_vals[which.max(fn_vals)])
## Normalization with AGHQ:
obj <- function(x) {exp(ff$fn(x))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
mode
x_vals[which.max(fn_vals)]
plot(x_pred, mean_pred, type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
polygon(c(x_pred, rev(x_pred)), c(upper_bound, rev(lower_bound)), col = 'grey80', border = NA)
lines(x_pred, mean_pred, lwd = 2)
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
result_ad$result$x
data_to_smooth <- result_ad$result
ff$fn <- function(xvalue){
predict(smooth.spline(x = data_to_smooth$x, y = data_to_smooth$y), x = xvalue)$y
}
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(x_vals, ff$fn)
mode <- x_vals[which.max(fn_vals)]
plot(x_vals, fn_vals, type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(pnorm(y)))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
post_x
plot(post_x$pos ~ post_x$x, type = 'l')
obj <- function(y) {exp(ff$fn(pnorm(y)) + dnorm(y, log = TRUE))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
plot(post_x$pos ~ post_x$x, type = 'l')
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(x_vals, ff$fn)
mode <- x_vals[which.max(fn_vals)]
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
mode <- y_vals[which.max(fn_vals)]
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
surrogate <- function(xvalue){
predict(smooth.spline(x = data_to_smooth$x, y = data_to_smooth$y), x = xvalue)$y
}
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
fn_vals
mode <- y_vals[which.max(fn_vals)]
mode
mode <- pnorm(y_vals[which.max(fn_vals)])
mode
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(pnorm(y)) + dnorm(y, log = TRUE))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
mode <- pnorm(y_vals[which.max(fn_vals)])
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(y))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
library(BayesGP)
set.seed(123)
noise_var = 1e-10
source(file = "bo_functions.R")
#### Now consider doing it adaptively:
result_ad <- BO_adap(func = objective_func,
update_step = 10,
number_eval = 20,
beta = 3,
lower = 1,
upper = 9,
length_scale = 1,
signal_var = 1,
noise_var = noise_var,
initial = 1)
data_to_smooth <- result_ad$result
surrogate <- function(xvalue){
predict(smooth.spline(x = data_to_smooth$x, y = data_to_smooth$y), x = xvalue)$y
}
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
mode <- pnorm(y_vals[which.max(fn_vals)])
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(y))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
library(BayesGP)
set.seed(123)
noise_var = 1e-10
source(file = "bo_functions.R")
func_generator <- function(f1, f2) {
func <- function(x, a) {
sapply(x, function(xi) {
if (xi <= a) {
f1(xi)
} else {
f2(xi) - f2(a) + f1(a)
}
})
}
func
}
my_func <- func_generator(f1 = function(x) 1.1*x*log(x^2 + 1), f2 = function(x) 1.2*x)
plot(my_func(x = seq(0.1,10,length.out = 100), a = 6)~seq(0.1,10,length.out = 100), type = "l")
# Simulate observations from a regression model with a piecewise linear function
simulate_observation <- function(n, a, func) {
# Generate n random x values between 0 and 1
x <- seq(from = 0, to = 10, length.out = n)
# Initialize y
y <- numeric(n)
# Loop through each x to compute the corresponding y value based on the piecewise function
fx <- func(x = x, a = a)
# Add random noise e from a standard normal distribution
e <- rnorm(n, mean = 0, sd = 1)
y <- fx + e
return(data.frame(x, y))
}
# Number of observations
n <- 1000
# Knot value
a <- 5
# Simulate the data
# data <- simulate_observation(n = n, a = a, func = my_func)
load("data.rda")
plot(y~x, data)
eval_once <- function(alpha){
a_fit <- alpha
data$x1 <- ifelse(data$x <= a_fit, data$x, 0)
data$x2 <- ifelse(data$x > a_fit, (data$x - a_fit), 0)
data$Region <- ifelse(data$x <= a_fit, 1, 0)
mod <- model_fit(formula = y ~ Region + f(x = x1, model = "IWP", order = 2, k = 30) +
f(x = x2, model = "IWP", order = 2, k = 30),
data = data, method = "aghq", family = "Gaussian"
)
(mod$mod$normalized_posterior$lognormconst)
}
objective_func <- eval_once
square_exp_cov <- square_exp_cov_generator(length_scale = 1, signal_var = 1)
square_exp_cov_gr <- square_exp_cov_deriv_generator(length_scale = 1, signal_var = 1)
square_exp_cov_hess <- square_exp_cov_hess_generator(length_scale = 1, signal_var = 1)
# Run Bayesian Optimization
result <- BO(func = objective_func,
initial = 1,
number_eval = 20,
beta = 3,
lower = 1,
upper = 9,
choice_cov = square_exp_cov,
noise_var = noise_var)
data_to_smooth <- result
surrogate <- function(xvalue){
predict(smooth.spline(x = data_to_smooth$x, y = data_to_smooth$y), x = xvalue)$y
}
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
source("~/Desktop/BOBI/simulation/change_point/change_point_BO_adaptive.R", echo=TRUE)
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result$x, result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(y))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
source("~/Desktop/BOBI/simulation/change_point/change_point_BO_adaptive.R", echo=TRUE)
noise_var
source("~/Desktop/BOBI/simulation/change_point/change_point_BO_adaptive.R", echo=TRUE)
?ss
library(nopreg)
install.packages("nopreg")
library(npreg)
install.packages(npreg)
install.packages("npreg")
library(ss)
library(npreg)
?ss
?smooth.spline
?ss
surrogate <- function(xvalue){
predict(ss(x = data_to_smooth$x, y = data_to_smooth$y, m = 3), x = xvalue)$y
}
ff <- list()
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
mode <- pnorm(y_vals[which.max(fn_vals)])
mode
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result$x, result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(y))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
data_to_smooth <- result_ad$result
surrogate <- function(xvalue){
predict(smooth.spline(x = data_to_smooth$x, y = data_to_smooth$y), x = xvalue)$y
}
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
mode <- pnorm(y_vals[which.max(fn_vals)])
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(y))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
