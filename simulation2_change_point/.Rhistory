?smooth.spline
?ss
surrogate <- function(xvalue){
predict(ss(x = data_to_smooth$x, y = data_to_smooth$y, m = 3), x = xvalue)$y
}
ff <- list()
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
mode <- pnorm(y_vals[which.max(fn_vals)])
mode
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result$x, result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(y))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
data_to_smooth <- result_ad$result
surrogate <- function(xvalue){
predict(smooth.spline(x = data_to_smooth$x, y = data_to_smooth$y), x = xvalue)$y
}
ff$fn <- function(y) as.numeric(surrogate(pnorm(y)) + dnorm(y, log = TRUE))
x_vals <- seq(0.01, 0.99, length.out = 100)
y_vals <- qnorm(x_vals)
fn_vals <- sapply(y_vals, ff$fn)
mode <- pnorm(y_vals[which.max(fn_vals)])
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
obj <- function(y) {exp(ff$fn(y))}
lognormal_const <- log(integrate(obj, lower = -100, upper = 100)$value)
post_y <- data.frame(y = y_vals, pos = exp(fn_vals - lognormal_const))
## Convert to the original scale:
post_x <- data.frame(x = pnorm(y_vals)*10, pos = post_y$pos * (1/dnorm(y_vals))/10)
# #### Compare with MCMC:
load(file = "mcmc_samps.rda")
# plot(mcmc_samps)
burnin <- 1000
# hist(mcmc_samps[-c(1:burnin)], breaks = 30)
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
### Compare with grid result:
load(file = "exact_grid_result.rda")
true_mode <- exact_grid_result$x[which.max(exact_grid_result$fx)]
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 50, alpha = 0.5, fill = "blue") +
geom_line(data = post_x, aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result, aes(x = x, y = pos), color = "black", size = 1, linetype = "dashed") +
ggtitle("Comparison Posterior Density") +
xlab("Value") +
ylab("Density") +
theme_minimal()
plot(x_vals, surrogate(x_vals), type = 'l', ylim = range(c(-10, 10)),
xlab = 'X', ylab = 'Y', main = 'Posterior of the Function')
points(result_ad$result$x, result_ad$result$y, pch = 19, col = 'red')  # Plot observed data
library(BayesGP)
library(npreg)
library(ggplot2)
library(INLA)
set.seed(123)
noise_var = 1e-8
source_location <- "function/"
source(file = paste0(source_location, "bo_functions.R"))
load("data.rda")
plot(y~x, data)
eval_once <- function(alpha){
a_fit <- alpha
data$x1 <- ifelse(data$x <= a_fit, data$x, a_fit)
data$x2 <- ifelse(data$x > a_fit, (data$x - a_fit), 0)
mod <- model_fit(formula = y ~ f(x1, model = "IWP", order = 2, sd.prior = list(param = 1, h = 1), initial_location = 0) + f(x2, model = "IWP", order = 2, sd.prior = list(param = 1, h = 1), initial_location = 0),
data = data, method = "aghq", family = "Gaussian", aghq_k = 3
)
(mod$mod$normalized_posterior$lognormconst)
}
surrogate <- function(xvalue, data_to_smooth){
predict(ss(x = data_to_smooth$x, y = data_to_smooth$y, df = length(unique(data_to_smooth$x)), m = 2, all.knots = TRUE), x = xvalue)$y
}
lower = 0.1
upper = 9.9
objective_func <- eval_once
#### Runtime analysis:
eval_num <- seq(from = 15, to = 35, by = 5)
rel_runtime <- c()
BO_result_list <- list()
BO_result_original_list <- list()
load("BO_data_to_smooth.rda")
load("result/BO_data_to_smooth.rda")
load("results/BO_data_to_smooth.rda")
load("results/BO_result_list.rda")
#### Comparison:
load(file = "exact_grid_result.rda")
#### Comparison:
load(file = "results/exact_grid_result.rda")
load(file = "results/exact_grid_result_smooth.rda")
load(file = "results/mcmc_samps.rda")
burnin <- 1000
thinning <- 3
mcmc_samps_selected <- mcmc_samps[-c(1:burnin)][seq(1, length(mcmc_samps[-c(1:burnin)]), by=thinning)]
output_dir <- "figures/"
i
i = 1
tex_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".tex")
pdf_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".pdf")
# Use tikzDevice to save the figures as pdf
tikzDevice::tikz(file = paste0("figures/change_point_BO_", eval_num[i], ".tex"),
width = 5, height = 5, standAlone = TRUE)
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 300, alpha = 0.8, fill = "skyblue") +
geom_line(data = BO_result_list[[i]], aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result_smooth, aes(x = x, y = pos), color = "black", size = 0.5, linetype = "dashed") +
ggtitle(paste0("Comparison Posterior Density: B = ", eval_num[i])) +
xlab("Value") +
ylab("Density") +
lims(x = c(5,8)) +
lims(y = c(0,10)) +
theme(text=element_text(size=10)) +
theme_minimal()
dev.off()
if (file.exists(tex_file_name)) {
system(sprintf('pdflatex -output-directory=%s "%s"', output_dir, tex_file_name))
# Check if the PDF was created
if (file.exists(pdf_file_name)) {
# Delete the .tex, .aux, and .log files to clean up
file.remove(tex_file_name)
file.remove(paste0(output_dir, base_name, ".aux"))
file.remove(paste0(output_dir, base_name, ".log"))
} else {
warning("PDF file was not created: ", pdf_file_name)
}
} else {
warning("TeX file was not created: ", tex_file_name)
}
tex_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".tex")
pdf_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".pdf")
# Use tikzDevice to save the figures as pdf
tikzDevice::tikz(file = paste0("figures/change_point_BO_", eval_num[i], ".tex"),
width = 5, height = 5, standAlone = TRUE)
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 300, alpha = 0.8, fill = "skyblue") +
geom_line(data = BO_result_list[[i]], aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result_smooth, aes(x = x, y = pos), color = "black", size = 0.5, linetype = "dashed") +
ggtitle(paste0("Comparison Posterior Density: B = ", eval_num[i])) +
xlab("Value") +
ylab("Density") +
lims(x = c(5,8)) +
lims(y = c(0,10)) +
theme(text=element_text(size=10)) +
theme_minimal()
# ggsave(filename = paste0("figures/change_point_BO_", eval_num[i], ".pdf"), width = 5, height = 5)
dev.off()
if (file.exists(tex_file_name)) {
system(sprintf('pdflatex -output-directory=%s "%s"', output_dir, tex_file_name))
# Check if the PDF was created
if (file.exists(pdf_file_name)) {
# Delete the .tex, .aux, and .log files to clean up
file.remove(tex_file_name)
file.remove(paste0(output_dir, base_name, ".aux"))
file.remove(paste0(output_dir, base_name, ".log"))
} else {
warning("PDF file was not created: ", pdf_file_name)
}
} else {
warning("TeX file was not created: ", tex_file_name)
}
tex_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".tex")
pdf_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".pdf")
base_name <- paste0("figures/change_point_BO_", eval_num[i])
# Use tikzDevice to save the figures as pdf
tikzDevice::tikz(file = paste0("figures/change_point_BO_", eval_num[i], ".tex"),
width = 5, height = 5, standAlone = TRUE)
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 300, alpha = 0.8, fill = "skyblue") +
geom_line(data = BO_result_list[[i]], aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result_smooth, aes(x = x, y = pos), color = "black", size = 0.5, linetype = "dashed") +
ggtitle(paste0("Comparison Posterior Density: B = ", eval_num[i])) +
xlab("Value") +
ylab("Density") +
lims(x = c(5,8)) +
lims(y = c(0,10)) +
theme(text=element_text(size=10)) +
theme_minimal()
# ggsave(filename = paste0("figures/change_point_BO_", eval_num[i], ".pdf"), width = 5, height = 5)
dev.off()
if (file.exists(tex_file_name)) {
system(sprintf('pdflatex -output-directory=%s "%s"', output_dir, tex_file_name))
# Check if the PDF was created
if (file.exists(pdf_file_name)) {
# Delete the .tex, .aux, and .log files to clean up
file.remove(tex_file_name)
file.remove(paste0(output_dir, base_name, ".aux"))
file.remove(paste0(output_dir, base_name, ".log"))
} else {
warning("PDF file was not created: ", pdf_file_name)
}
} else {
warning("TeX file was not created: ", tex_file_name)
}
base_name
output_dir
base_name
base_name <- paste0("change_point_BO_", eval_num[i])
tex_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".tex")
pdf_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".pdf")
base_name <- paste0("change_point_BO_", eval_num[i])
# Use tikzDevice to save the figures as pdf
tikzDevice::tikz(file = paste0("figures/change_point_BO_", eval_num[i], ".tex"),
width = 5, height = 5, standAlone = TRUE)
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 300, alpha = 0.8, fill = "skyblue") +
geom_line(data = BO_result_list[[i]], aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result_smooth, aes(x = x, y = pos), color = "black", size = 0.5, linetype = "dashed") +
ggtitle(paste0("Comparison Posterior Density: B = ", eval_num[i])) +
xlab("Value") +
ylab("Density") +
lims(x = c(5,8)) +
lims(y = c(0,10)) +
theme(text=element_text(size=10)) +
theme_minimal()
# ggsave(filename = paste0("figures/change_point_BO_", eval_num[i], ".pdf"), width = 5, height = 5)
dev.off()
if (file.exists(tex_file_name)) {
system(sprintf('pdflatex -output-directory=%s "%s"', output_dir, tex_file_name))
# Check if the PDF was created
if (file.exists(pdf_file_name)) {
# Delete the .tex, .aux, and .log files to clean up
file.remove(tex_file_name)
file.remove(paste0(output_dir, base_name, ".aux"))
file.remove(paste0(output_dir, base_name, ".log"))
} else {
warning("PDF file was not created: ", pdf_file_name)
}
} else {
warning("TeX file was not created: ", tex_file_name)
}
i
length(eval_num)
i = 2
tex_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".tex")
pdf_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".pdf")
base_name <- paste0("change_point_BO_", eval_num[i])
# Use tikzDevice to save the figures as pdf
tikzDevice::tikz(file = paste0("figures/change_point_BO_", eval_num[i], ".tex"),
width = 5, height = 5, standAlone = TRUE)
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 300, alpha = 0.8, fill = "skyblue") +
geom_line(data = BO_result_list[[i]], aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result_smooth, aes(x = x, y = pos), color = "black", size = 0.5, linetype = "dashed") +
ggtitle(paste0("Comparison Posterior Density: B = ", eval_num[i])) +
xlab("Value") +
ylab("Density") +
lims(x = c(5,8)) +
lims(y = c(0,10)) +
theme(text=element_text(size=10)) +
theme_minimal()
# ggsave(filename = paste0("figures/change_point_BO_", eval_num[i], ".pdf"), width = 5, height = 5)
dev.off()
if (file.exists(tex_file_name)) {
system(sprintf('pdflatex -output-directory=%s "%s"', output_dir, tex_file_name))
# Check if the PDF was created
if (file.exists(pdf_file_name)) {
# Delete the .tex, .aux, and .log files to clean up
file.remove(tex_file_name)
file.remove(paste0(output_dir, base_name, ".aux"))
file.remove(paste0(output_dir, base_name, ".log"))
} else {
warning("PDF file was not created: ", pdf_file_name)
}
} else {
warning("TeX file was not created: ", tex_file_name)
}
i = i + 1
tex_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".tex")
pdf_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".pdf")
base_name <- paste0("change_point_BO_", eval_num[i])
# Use tikzDevice to save the figures as pdf
tikzDevice::tikz(file = paste0("figures/change_point_BO_", eval_num[i], ".tex"),
width = 5, height = 5, standAlone = TRUE)
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 300, alpha = 0.8, fill = "skyblue") +
geom_line(data = BO_result_list[[i]], aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result_smooth, aes(x = x, y = pos), color = "black", size = 0.5, linetype = "dashed") +
ggtitle(paste0("Comparison Posterior Density: B = ", eval_num[i])) +
xlab("Value") +
ylab("Density") +
lims(x = c(5,8)) +
lims(y = c(0,10)) +
theme(text=element_text(size=10)) +
theme_minimal()
# ggsave(filename = paste0("figures/change_point_BO_", eval_num[i], ".pdf"), width = 5, height = 5)
dev.off()
if (file.exists(tex_file_name)) {
system(sprintf('pdflatex -output-directory=%s "%s"', output_dir, tex_file_name))
# Check if the PDF was created
if (file.exists(pdf_file_name)) {
# Delete the .tex, .aux, and .log files to clean up
file.remove(tex_file_name)
file.remove(paste0(output_dir, base_name, ".aux"))
file.remove(paste0(output_dir, base_name, ".log"))
} else {
warning("PDF file was not created: ", pdf_file_name)
}
} else {
warning("TeX file was not created: ", tex_file_name)
}
i = i + 1
tex_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".tex")
pdf_file_name <- paste0("figures/change_point_BO_", eval_num[i], ".pdf")
base_name <- paste0("change_point_BO_", eval_num[i])
# Use tikzDevice to save the figures as pdf
tikzDevice::tikz(file = paste0("figures/change_point_BO_", eval_num[i], ".tex"),
width = 5, height = 5, standAlone = TRUE)
ggplot() +
geom_histogram(aes(x = mcmc_samps_selected, y = ..density..), bins = 300, alpha = 0.8, fill = "skyblue") +
geom_line(data = BO_result_list[[i]], aes(x = x, y = pos), color = "red", size = 1) +
geom_line(data = exact_grid_result_smooth, aes(x = x, y = pos), color = "black", size = 0.5, linetype = "dashed") +
ggtitle(paste0("Comparison Posterior Density: B = ", eval_num[i])) +
xlab("Value") +
ylab("Density") +
lims(x = c(5,8)) +
lims(y = c(0,10)) +
theme(text=element_text(size=10)) +
theme_minimal()
# ggsave(filename = paste0("figures/change_point_BO_", eval_num[i], ".pdf"), width = 5, height = 5)
dev.off()
if (file.exists(tex_file_name)) {
system(sprintf('pdflatex -output-directory=%s "%s"', output_dir, tex_file_name))
# Check if the PDF was created
if (file.exists(pdf_file_name)) {
# Delete the .tex, .aux, and .log files to clean up
file.remove(tex_file_name)
file.remove(paste0(output_dir, base_name, ".aux"))
file.remove(paste0(output_dir, base_name, ".log"))
} else {
warning("PDF file was not created: ", pdf_file_name)
}
} else {
warning("TeX file was not created: ", tex_file_name)
}
library(BayesGP)
library(npreg)
library(ggplot2)
library(INLA)
source_location <- "function/"
source(file = paste0(source_location, "bo_functions.R"))
load("results/data.rda")
load("results/quad_exact.rda")
load("results/quad_BO.rda")
g1 <- function(x){x*log((x^2) + 1)}
g2 <- function(x){3.3*x + 3.035}
### Function that simulate from Quad, then make inference of the function
fit_once <- function(alpha, data){
a_fit <- alpha
data$x1 <- ifelse(data$x <= a_fit, data$x, a_fit)
data$x2 <- ifelse(data$x > a_fit, (data$x - a_fit), 0)
mod <- model_fit(formula = y ~ f(x1, model = "IWP", order = 2, sd.prior = list(param = 1, h = 1), initial_location = 0) + f(x2, model = "IWP", order = 2, sd.prior = list(param = 1, h = 1), initial_location = 0),
data = data, method = "aghq", family = "Gaussian", aghq_k = 3
)
mod
}
sim_quad <- function(n, quad){
prob_vec = quad$weights * exp(quad$logpost_normalized)
freq <- as.numeric(rmultinom(n = 1, size = n, prob = prob_vec))
samp_theta <- rep(quad$theta1, times = freq)
samp_alpha <- pnorm(samp_theta)*10
samp_alpha
}
fit_all_mod <- function(alpha_samps){
alpha_samps_table <- table(alpha_samps)
result_list <- list(alpha = as.numeric(names(alpha_samps_table)), mod = list(), M = as.numeric(alpha_samps_table))
for (i in 1:length(alpha_samps_table)) {
M <- as.numeric(alpha_samps_table[i])
alpha <- as.numeric(names(alpha_samps_table)[i])
mod <- fit_once(alpha = alpha, data = data)
result_list$mod[[i]] <- mod
}
result_list
}
infer_g1 <- function(xvec, all_mod){
all_samps <- matrix(nrow = length(xvec), ncol = 0)
for (i in 1:length(all_mod$M)) {
mod <- all_mod$mod[[i]]
samples_g1 <- predict(mod, variable = "x1",
newdata = data.frame(x1 = xvec),
only.sample = T)[,-1]
all_samps <- cbind(all_samps, samples_g1[,(1:all_mod$M[i])])
}
all_samps
}
infer_g2 <- function(xvec, all_mod){
all_samps <- matrix(nrow = length(xvec), ncol = 0)
for (i in 1:length(all_mod$M)) {
mod <- all_mod$mod[[i]]
samples_g2 <- predict(mod, variable = "x2",
newdata = data.frame(x2 = xvec),
only.sample = T)[,-1]
all_samps <- cbind(all_samps, samples_g2[,(1:all_mod$M[i])])
}
all_samps
}
### Using exact grid:
set.seed(123)
exact_all_mod <- fit_all_mod(sim_quad(n = 3000, quad = quad_exact))
exact_samples_g1 <- infer_g1(xvec = seq(0, 10, by = 0.01), all_mod = exact_all_mod)
exact_samples_g2 <- infer_g2(xvec = seq(0, 10, by = 0.01), all_mod = exact_all_mod)
exact_samples_g1_sum <- BayesGP::extract_mean_interval_given_samps(samps = cbind(seq(0, 10, by = 0.01), exact_samples_g1))
exact_samples_g2_sum <- BayesGP::extract_mean_interval_given_samps(samps = cbind(seq(0, 10, by = 0.01), exact_samples_g2))
plot(q0.5~x, data = exact_samples_g1_sum, type = "l", col = "blue", ylab = "g1")
lines(q0.975~x, data = exact_samples_g1_sum, lty = "dashed", col = "red")
lines(q0.025~x, data = exact_samples_g1_sum, lty = "dashed", col = "red")
lines(g1(x)~x, exact_samples_g1_sum, col = "black")
plot(q0.5~x, data = exact_samples_g2_sum, type = "l", col = "blue", ylab = "g2")
lines(q0.975~x, data = exact_samples_g2_sum, lty = "dashed", col = "red")
lines(q0.025~x, data = exact_samples_g2_sum, lty = "dashed", col = "red")
lines(I(g2(x)-g2(0))~x, exact_samples_g1_sum, col = "black")
BO_all_mod <- fit_all_mod(sim_quad(n = 3000, quad = quad_BO))
BO_samples_g1 <- infer_g1(xvec = seq(0, 10, by = 0.01), all_mod = BO_all_mod)
BO_samples_g2 <- infer_g2(xvec = seq(0, 10, by = 0.01), all_mod = BO_all_mod)
BO_samples_g1_sum <- BayesGP::extract_mean_interval_given_samps(samps = cbind(seq(0, 10, by = 0.01), BO_samples_g1))
BO_samples_g2_sum <- BayesGP::extract_mean_interval_given_samps(samps = cbind(seq(0, 10, by = 0.01), BO_samples_g2))
### Using BOSS approximation:
set.seed(123)
BO_all_mod <- fit_all_mod(sim_quad(n = 3000, quad = quad_BO))
BO_samples_g1 <- infer_g1(xvec = seq(0, 10, by = 0.01), all_mod = BO_all_mod)
BO_samples_g2 <- infer_g2(xvec = seq(0, 10, by = 0.01), all_mod = BO_all_mod)
BO_samples_g1_sum <- BayesGP::extract_mean_interval_given_samps(samps = cbind(seq(0, 10, by = 0.01), BO_samples_g1))
BO_samples_g2_sum <- BayesGP::extract_mean_interval_given_samps(samps = cbind(seq(0, 10, by = 0.01), BO_samples_g2))
plot(q0.5~x, data = BO_samples_g1_sum, type = "l", col = "blue", ylab = "g1")
lines(q0.975~x, data = BO_samples_g1_sum, lty = "dashed", col = "red")
lines(q0.025~x, data = BO_samples_g1_sum, lty = "dashed", col = "red")
lines(g1(x)~x, BO_samples_g1_sum, col = "black")
plot(q0.5~x, data = BO_samples_g2_sum, type = "l", col = "blue", ylab = "g2")
lines(q0.975~x, data = BO_samples_g2_sum, lty = "dashed", col = "red")
lines(q0.025~x, data = BO_samples_g2_sum, lty = "dashed", col = "red")
lines(I(g2(x)-g2(0))~x, BO_samples_g1_sum, col = "black")
### Comparison in one figure:
exact_samples_color <- rgb(1, 0, 0, alpha = 0.2) # Red with transparency
BO_samples_color <- rgb(0, 0, 1, alpha = 0.2) # Blue with transparency
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 1, 0, 0))
plot(q0.5~x, data = exact_samples_g1_sum, type = "l", col = "red", ylab = "", lty = "dashed", cex.lab = 2.0, cex.axis = 2.0)
polygon(c(exact_samples_g1_sum$x, rev(exact_samples_g1_sum$x)),
c(exact_samples_g1_sum$q0.025, rev(exact_samples_g1_sum$q0.975)),
col = exact_samples_color, border = NA)
lines(g1(x)~x, exact_samples_g1_sum, col = "black")
polygon(c(BO_samples_g1_sum$x, rev(BO_samples_g1_sum$x)),
c(BO_samples_g1_sum$q0.025, rev(BO_samples_g1_sum$q0.975)),
col = BO_samples_color, border = NA)
lines(q0.5~x, data = BO_samples_g1_sum, col = "blue", lty = "dashed")
plot(q0.5~x, data = exact_samples_g2_sum, type = "l", col = "red", ylab = "", lty = "dashed", cex.lab = 2.0, cex.axis = 2.0)
polygon(c(exact_samples_g2_sum$x, rev(exact_samples_g2_sum$x)),
c(exact_samples_g2_sum$q0.025, rev(exact_samples_g2_sum$q0.975)),
col = exact_samples_color, border = NA)
lines(I(g2(x)-g2(0))~x, exact_samples_g1_sum, col = "black")
polygon(c(BO_samples_g2_sum$x, rev(BO_samples_g2_sum$x)),
c(BO_samples_g2_sum$q0.025, rev(BO_samples_g2_sum$q0.975)),
col = BO_samples_color, border = NA)
lines(q0.5~x, data = BO_samples_g2_sum, col = "blue", lty = "dashed")
tikzDevice::tikz(file = paste0("figures/compare_g1.tex"),
width = 5, height = 5, standAlone = TRUE)
plot(q0.5~x, data = exact_samples_g1_sum, type = "l", col = "red", ylab = "", lty = "dashed", cex.lab = 2.0, cex.axis = 2.0)
polygon(c(exact_samples_g1_sum$x, rev(exact_samples_g1_sum$x)),
c(exact_samples_g1_sum$q0.025, rev(exact_samples_g1_sum$q0.975)),
col = exact_samples_color, border = NA)
lines(g1(x)~x, exact_samples_g1_sum, col = "black")
polygon(c(BO_samples_g1_sum$x, rev(BO_samples_g1_sum$x)),
c(BO_samples_g1_sum$q0.025, rev(BO_samples_g1_sum$q0.975)),
col = BO_samples_color, border = NA)
lines(q0.5~x, data = BO_samples_g1_sum, col = "blue", lty = "dashed")
dev.off()
system("pdflatex -output-directory=./figures ./figures/compare_g1.tex")
file.remove("./figures/compare_g1.tex")
file.remove("./figures/compare_g1.aux")
file.remove("./figures/compare_g1.log"")
file.remove("./figures/compare_g1.log")
file.remove("./figures/compare_g1.log")
tikzDevice::tikz(file = paste0("figures/compare_g2.tex"),
width = 5, height = 5, standAlone = TRUE)
plot(q0.5~x, data = exact_samples_g2_sum, type = "l", col = "red", ylab = "", lty = "dashed", cex.lab = 2.0, cex.axis = 2.0)
polygon(c(exact_samples_g2_sum$x, rev(exact_samples_g2_sum$x)),
c(exact_samples_g2_sum$q0.025, rev(exact_samples_g2_sum$q0.975)),
col = exact_samples_color, border = NA)
lines(I(g2(x)-g2(0))~x, exact_samples_g1_sum, col = "black")
polygon(c(BO_samples_g2_sum$x, rev(BO_samples_g2_sum$x)),
c(BO_samples_g2_sum$q0.025, rev(BO_samples_g2_sum$q0.975)),
col = BO_samples_color, border = NA)
lines(q0.5~x, data = BO_samples_g2_sum, col = "blue", lty = "dashed")
dev.off()
system("pdflatex -output-directory=./figures ./figures/compare_g2.tex")
file.remove("./figures/compare_g2.tex")
file.remove("./figures/compare_g2.aux")
file.remove("./figures/compare_g2.log")
